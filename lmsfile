DAO Package
üìÅ Package: com.lms.repository

üóÇ Interface: ProgressRepository.java
package com.lms.repository;

import com.lms.model.Progress;
import com.lms.model.User;
import com.lms.model.Course;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;
import java.util.Optional;

public interface ProgressRepository extends JpaRepository<Progress, Long> {
    List<Progress> findByStudent(User student);
    List<Progress> findByCourse(Course course);
    Optional<Progress> findByStudentAndCourse(User student, Course course);
}

*************
 Service Package
üìÅ Package: com.lms.service

üóÇ Interface: ProgressService.java
package com.lms.service;

import com.lms.model.Progress;
import com.lms.model.User;
import com.lms.model.Course;
import java.util.List;
import java.util.Optional;

public interface ProgressService {
    Progress saveProgress(Progress progress);
    Optional<Progress> getProgressById(Long id);
    List<Progress> getProgressByStudent(User student);
    List<Progress> getProgressByCourse(Course course);
    Optional<Progress> getProgressByStudentAndCourse(User student, Course course);
    Optional<Progress> updateProgress(Long progressId, int completedLessons, int quizScores);
    Optional<Progress> updateProgressAfterQuiz(User student, Course course, int quizScore);
}

******************
üóÇ Implementation: ProgressServiceImpl.java
package com.lms.service.impl;

import com.lms.model.Progress;
import com.lms.model.User;
import com.lms.model.Course;
import com.lms.repository.ProgressRepository;
import com.lms.service.ProgressService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ProgressServiceImpl implements ProgressService {

    @Autowired
    private ProgressRepository progressRepository;

    @Override
    public Progress saveProgress(Progress progress) {
        return progressRepository.save(progress);
    }

    @Override
    public Optional<Progress> getProgressById(Long id) {
        return progressRepository.findById(id);
    }

    @Override
    public List<Progress> getProgressByStudent(User student) {
        return progressRepository.findByStudent(student);
    }

    @Override
    public List<Progress> getProgressByCourse(Course course) {
        return progressRepository.findByCourse(course);
    }

    @Override
    public Optional<Progress> getProgressByStudentAndCourse(User student, Course course) {
        return progressRepository.findByStudentAndCourse(student, course);
    }

    @Override
    public Optional<Progress> updateProgress(Long progressId, int completedLessons, int quizScores) {
        return progressRepository.findById(progressId).map(progress -> {
            progress.setCompletedLessons(completedLessons);
            progress.setQuizScores(quizScores);
            return progressRepository.save(progress);
        });
    }

    @Override
    public Optional<Progress> updateProgressAfterQuiz(User student, Course course, int quizScore) {
        // Get existing progress or create new one
        Progress progress = progressRepository.findByStudentAndCourse(student, course)
            .orElseGet(() -> {
                Progress p = new Progress();
                p.setStudent(student);
                p.setCourse(course);
                p.setCompletedLessons(0); // starting point
                p.setQuizScores(0);
                return p;
            });
    
        // Update quiz score (sum)
        int updatedScore = progress.getQuizScores() + quizScore;
        progress.setQuizScores(updatedScore);
    
        // Optional: Update lessons count (if quiz completion counts as progress)
        int updatedLessons = progress.getCompletedLessons() + 1;
        progress.setCompletedLessons(updatedLessons);
    
        Progress savedProgress = progressRepository.save(progress);
        return Optional.of(savedProgress);
    }

}

************
DTO Package
üìÅ Package: com.lms.dto

üóÇ ProgressDTO.java
package com.lms.dto;

import lombok.Data;

@Data
public class ProgressDTO {
    private Long id;
    private Long studentId;
    private Long courseId;
    private int completedLessons;
    private int quizScores;
}
****************
üóÇ ProgressUpdateDTO.java (for updates only)
package com.lms.dto;

import lombok.Data;

@Data
public class ProgressUpdateDTO {
    private int completedLessons;
    private int quizScores;
}
******************
Controller Layer(part 1)
üìÅ Package: com.lms.controller

üóÇ ProgressController.java
package com.lms.controller;

‚úÖ View all student progress by Course
‚úÖ Download as report (simulated, returning list for now)
‚úÖ Send Reminder (dummy endpoint)
‚úÖ Secure with @PreAuthorize for instructor-only actions
‚úÖ Use ResponseEntity

Here‚Äôs your upgraded ProgressController üëá
package com.lms.controller;

import com.lms.dto.ProgressDTO;
import com.lms.dto.ProgressUpdateDTO;
import com.lms.model.Course;
import com.lms.model.Progress;
import com.lms.model.User;
import com.lms.service.CourseService;
import com.lms.service.ProgressService;
import com.lms.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/progress")
public class ProgressController {

    @Autowired
    private ProgressService progressService;

    @Autowired
    private UserService userService;

    @Autowired
    private CourseService courseService;

    // ‚úÖ Create Progress (Only Instructor)
    @PreAuthorize("hasRole('INSTRUCTOR')")
    @PostMapping("/")
    public ResponseEntity<ProgressDTO> createProgress(@RequestBody ProgressDTO dto) {
        User student = userService.getUserById(dto.getStudentId());
        Course course = courseService.getCourseById(dto.getCourseId());

        Progress progress = new Progress();
        progress.setStudent(student);
        progress.setCourse(course);
        progress.setCompletedLessons(dto.getCompletedLessons());
        progress.setQuizScores(dto.getQuizScores());

        Progress saved = progressService.saveProgress(progress);
        return ResponseEntity.ok(mapToDTO(saved));
    }

    // ‚úÖ Get Progress by Id (Optional-safe)
    @GetMapping("/{id}")
    public ResponseEntity<ProgressDTO> getProgress(@PathVariable Long id) {
        return progressService.getProgressById(id)
                .map(this::mapToDTO)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // ‚úÖ Get Progress by Student (Instructor can view all students)
    @PreAuthorize("hasRole('INSTRUCTOR')")
    @GetMapping("/student/{studentId}")
    public ResponseEntity<List<ProgressDTO>> getProgressByStudent(@PathVariable Long studentId) {
        User student = userService.getUserById(studentId);
        List<Progress> progressList = progressService.getProgressByStudent(student);
        List<ProgressDTO> dtoList = progressList.stream().map(this::mapToDTO).collect(Collectors.toList());
        return ResponseEntity.ok(dtoList);
    }

    // ‚úÖ Update Progress (Only Instructor)
    @PreAuthorize("hasRole('INSTRUCTOR')")
    @PutMapping("/{id}")
    public ResponseEntity<ProgressDTO> updateProgress(@PathVariable Long id, @RequestBody ProgressUpdateDTO dto) {
        return progressService.updateProgress(id, dto.getCompletedLessons(), dto.getQuizScores())
                .map(this::mapToDTO)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // ‚úÖ NEW: Get All Student Progress for a Course
    @PreAuthorize("hasRole('INSTRUCTOR')")
    @GetMapping("/course/{courseId}")
    public ResponseEntity<List<ProgressDTO>> getProgressByCourse(@PathVariable Long courseId) {
        Course course = courseService.getCourseById(courseId);
        List<Progress> progressList = progressService.getProgressByCourse(course);
        List<ProgressDTO> dtoList = progressList.stream().map(this::mapToDTO).collect(Collectors.toList());
        return ResponseEntity.ok(dtoList);
    }

    // ‚úÖ NEW: Simulate Download Report (return list now)
    @PreAuthorize("hasRole('INSTRUCTOR')")
    @GetMapping("/course/{courseId}/download")
    public ResponseEntity<List<ProgressDTO>> downloadProgressReport(@PathVariable Long courseId) {
        Course course = courseService.getCourseById(courseId);
        List<Progress> progressList = progressService.getProgressByCourse(course);
        List<ProgressDTO> dtoList = progressList.stream().map(this::mapToDTO).collect(Collectors.toList());
        return ResponseEntity.ok(dtoList);
    }

    // ‚úÖ NEW: Send Reminder to Student (Optional-safe)
    @PreAuthorize("hasRole('INSTRUCTOR')")
    @PostMapping("/{progressId}/reminder")
    public ResponseEntity<String> sendReminder(@PathVariable Long progressId) {
        return progressService.getProgressById(progressId)
                .map(progress -> {
                    String studentName = progress.getStudent().getName();
                    // TODO: Implement real email logic
                    return ResponseEntity.ok("Reminder sent to student: " + studentName);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    // ‚úÖ Utility mapper
    private ProgressDTO mapToDTO(Progress progress) {
        ProgressDTO dto = new ProgressDTO();
        dto.setId(progress.getId());
        dto.setStudentId(progress.getStudent().getId());
        dto.setCourseId(progress.getCourse().getId());
        dto.setCompletedLessons(progress.getCompletedLessons());
        dto.setQuizScores(progress.getQuizScores());
        return dto;
    }
}

*******************
Security Hint
You can restrict creation and update APIs to "ROLE_INSTRUCTOR" using Spring Security annotations like this:
@PreAuthorize("hasRole('INSTRUCTOR')")
@PostMapping("/")
public ProgressDTO createProgress(@RequestBody ProgressDTO dto) { ... }

@PreAuthorize("hasRole('INSTRUCTOR')")
@PutMapping("/{id}")
public ProgressDTO updateProgress(@PathVariable Long id, @RequestBody ProgressUpdateDTO dto) { ... }
(‚úÖ works only if your User entity has a role field and you have Spring Security configured.)
‚úÖ Done:
DTO layer ‚úÖ
REST APIs ‚úÖ
Role-based hint ‚úÖ
Clean and Lombok-powered ‚úÖ
****************
Protect Your Controller Methods
In ProgressController.java or anywhere else, you can now secure APIs like this:
@PreAuthorize("hasRole('INSTRUCTOR')")
@PostMapping("/")
public ProgressDTO createProgress(@RequestBody ProgressDTO dto) { ... }

@PreAuthorize("hasRole('STUDENT')")
@GetMapping("/student/{studentId}")
public List<ProgressDTO> getProgressByStudent(@PathVariable Long studentId) { ... }
***********************


